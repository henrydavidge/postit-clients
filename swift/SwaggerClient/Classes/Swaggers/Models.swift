// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()
    
    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }
    
    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }
    
    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictinoary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictinoary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }
    
    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if source is T {
            return source as! T
        }
        
        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }
	
    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }
                
                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

			// Decoder for [PostitCreatePostItTable]
            Decoders.addDecoder(clazz: [PostitCreatePostItTable].self) { (source: AnyObject) -> [PostitCreatePostItTable] in
                return Decoders.decode(clazz: [PostitCreatePostItTable].self, source: source)
            }
			// Decoder for PostitCreatePostItTable
            Decoders.addDecoder(clazz: PostitCreatePostItTable.self) { (source: AnyObject) -> PostitCreatePostItTable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostitCreatePostItTable()
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["path"])
                instance.schema = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["schema"])
                instance.shardName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shard_name"])
                return instance
            }
			

			// Decoder for [PostitCreatePostItTableResponse]
            Decoders.addDecoder(clazz: [PostitCreatePostItTableResponse].self) { (source: AnyObject) -> [PostitCreatePostItTableResponse] in
                return Decoders.decode(clazz: [PostitCreatePostItTableResponse].self, source: source)
            }
			// Decoder for PostitCreatePostItTableResponse
            Decoders.addDecoder(clazz: PostitCreatePostItTableResponse.self) { (source: AnyObject) -> PostitCreatePostItTableResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostitCreatePostItTableResponse()
                instance.apiKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["api_key"])
                return instance
            }
			

			// Decoder for [PostitDeleteApiKey]
            Decoders.addDecoder(clazz: [PostitDeleteApiKey].self) { (source: AnyObject) -> [PostitDeleteApiKey] in
                return Decoders.decode(clazz: [PostitDeleteApiKey].self, source: source)
            }
			// Decoder for PostitDeleteApiKey
            Decoders.addDecoder(clazz: PostitDeleteApiKey.self) { (source: AnyObject) -> PostitDeleteApiKey in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostitDeleteApiKey()
                instance.apiKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["api_key"])
                return instance
            }
			

			// Decoder for [PostitDeleteApiKeyResponse]
            Decoders.addDecoder(clazz: [PostitDeleteApiKeyResponse].self) { (source: AnyObject) -> [PostitDeleteApiKeyResponse] in
                return Decoders.decode(clazz: [PostitDeleteApiKeyResponse].self, source: source)
            }
			// Decoder for PostitDeleteApiKeyResponse
            Decoders.addDecoder(clazz: PostitDeleteApiKeyResponse.self) { (source: AnyObject) -> PostitDeleteApiKeyResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostitDeleteApiKeyResponse()
                return instance
            }
			

			// Decoder for [PostitPostIt]
            Decoders.addDecoder(clazz: [PostitPostIt].self) { (source: AnyObject) -> [PostitPostIt] in
                return Decoders.decode(clazz: [PostitPostIt].self, source: source)
            }
			// Decoder for PostitPostIt
            Decoders.addDecoder(clazz: PostitPostIt.self) { (source: AnyObject) -> PostitPostIt in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostitPostIt()
                instance.apiKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["api_key"])
                instance.eventTime = Decoders.decodeOptional(clazz: Int.self, source: sourceDictionary["event_time"])
                instance.payload = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["payload"])
                return instance
            }
			

			// Decoder for [PostitPostItResponse]
            Decoders.addDecoder(clazz: [PostitPostItResponse].self) { (source: AnyObject) -> [PostitPostItResponse] in
                return Decoders.decode(clazz: [PostitPostItResponse].self, source: source)
            }
			// Decoder for PostitPostItResponse
            Decoders.addDecoder(clazz: PostitPostItResponse.self) { (source: AnyObject) -> PostitPostItResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostitPostItResponse()
                return instance
            }
			

			// Decoder for [PostitRegenerateApiKey]
            Decoders.addDecoder(clazz: [PostitRegenerateApiKey].self) { (source: AnyObject) -> [PostitRegenerateApiKey] in
                return Decoders.decode(clazz: [PostitRegenerateApiKey].self, source: source)
            }
			// Decoder for PostitRegenerateApiKey
            Decoders.addDecoder(clazz: PostitRegenerateApiKey.self) { (source: AnyObject) -> PostitRegenerateApiKey in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostitRegenerateApiKey()
                instance.apiKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["api_key"])
                return instance
            }
			

			// Decoder for [PostitRegenerateApiKeyResponse]
            Decoders.addDecoder(clazz: [PostitRegenerateApiKeyResponse].self) { (source: AnyObject) -> [PostitRegenerateApiKeyResponse] in
                return Decoders.decode(clazz: [PostitRegenerateApiKeyResponse].self, source: source)
            }
			// Decoder for PostitRegenerateApiKeyResponse
            Decoders.addDecoder(clazz: PostitRegenerateApiKeyResponse.self) { (source: AnyObject) -> PostitRegenerateApiKeyResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostitRegenerateApiKeyResponse()
                instance.apiKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["api_key"])
                return instance
            }
			

			// Decoder for [PostitUpdatePostItTable]
            Decoders.addDecoder(clazz: [PostitUpdatePostItTable].self) { (source: AnyObject) -> [PostitUpdatePostItTable] in
                return Decoders.decode(clazz: [PostitUpdatePostItTable].self, source: source)
            }
			// Decoder for PostitUpdatePostItTable
            Decoders.addDecoder(clazz: PostitUpdatePostItTable.self) { (source: AnyObject) -> PostitUpdatePostItTable in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostitUpdatePostItTable()
                instance.apiKey = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["api_key"])
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["path"])
                instance.schema = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["schema"])
                return instance
            }
			

			// Decoder for [PostitUpdatePostItTableResponse]
            Decoders.addDecoder(clazz: [PostitUpdatePostItTableResponse].self) { (source: AnyObject) -> [PostitUpdatePostItTableResponse] in
                return Decoders.decode(clazz: [PostitUpdatePostItTableResponse].self, source: source)
            }
			// Decoder for PostitUpdatePostItTableResponse
            Decoders.addDecoder(clazz: PostitUpdatePostItTableResponse.self) { (source: AnyObject) -> PostitUpdatePostItTableResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = PostitUpdatePostItTableResponse()
                return instance
            }
			
        }
    }
}
